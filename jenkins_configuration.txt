STRING PARAMETER
GIT
https://github.com/adilsonbna/devopsecosystem
Git repository from where we're going to checkout the code (master branch) and build a docker image.
NB! The repository must contain a Dockerfile in the root

STRING PARAMETER
DOCKER_REPOSITORY
hello-world
The docker repository

STRING PARAMETER
REGISTRY_URL
https://marsdevopsimages.azurecr.io
Container Registry URL

STRING PARAMETER
AKS_RESOURCE_GROUP_NAME
AdilsonSilvaRG
Azure Container Service (AKS) Resource Group Name

STRING PARAMETER
AKS_CLUSTER_NAME
marsdevopskubernetescluster
Azure Container Service (AKS) Cluster Name

CREDENTIALS PARAMETER
REGISTRY_CREDENTIALS_ID
Username with password
The credentials id that points to the Container Registry credentials

CREDENTIALS PARAMETER
AZURE_SERVICE_PRINCIPAL_ID
Microsoft Azure Service Principal
The Azure service princinpal id used to deploy configurations to ACS

PASSWORD PARAMETER
MONGODB_URI
The Uri of MongoDB used by the Hello world App. Format: mongodb://username:password@host:port



SCRIPT

node {
    def built_img = ''
    def taggedImageName = ''
    stage('Checkout git repo') {
      git branch: 'master', url: params.GIT_REPO
    }
    stage('Build Docker image') {
      built_img = docker.build(params.DOCKER_REPOSITORY + ":${env.BUILD_NUMBER}", './jenkins-cicd-container')
    }
    stage('Push Docker image to Azure Container Registry') {
      docker.withRegistry(params.REGISTRY_URL, params.REGISTRY_CREDENTIALS_ID ) {
        taggedImageName = built_img.tag("${env.BUILD_NUMBER}")
        built_img.push("${env.BUILD_NUMBER}");
      }
    stage('Do you approve devops') {
        input 'Do you approve deployment?'
    }
    stage('Deploy configurations to Azure Container Service (AKS)') {
      withEnv(['TAGGED_IMAGE_NAME=' + taggedImageName]) {
        acsDeploy azureCredentialsId: params.AZURE_SERVICE_PRINCIPAL_ID, configFilePaths: 'jenkins-cicd-container/kubernetes/*.yaml', containerService: params.AKS_CLUSTER_NAME + ' | AKS', dcosDockerCredentialsPath: '', enableConfigSubstitution: true, resourceGroupName: params.AKS_RESOURCE_GROUP_NAME, secretName: '', sshCredentialsId: ''
      }
    }
}